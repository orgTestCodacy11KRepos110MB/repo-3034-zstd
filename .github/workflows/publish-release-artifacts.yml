name: publish-release-artifacts

on:
  release:
    types:
      - published

permissions:
  contents: read

jobs:
  publish-release-artifacts:
    permissions:
      contents: read # to fetch code (actions/checkout)
      actions: write # to attach binaries to release artifacts (skx/github-action-publish-binaries)

    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Checkout
        uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # tag=v3

      - name: Archive
        env:
          RELEASE_SIGNING_KEY: ${{ secrets.RELEASE_SIGNING_KEY }}
          RELEASE_SIGNING_KEY_PASSPHRASE: ${{ secrets.RELEASE_SIGNING_KEY_PASSPHRASE }}
        run: |
          # compute file name
          export TAG="$(echo "$GITHUB_REF" | sed -n 's_^refs/tags/__p')"
          if [ -z "$TAG" ]; then
            echo "action must be run on a tag. GITHUB_REF is not a tag: $GITHUB_REF"
            exit 1
          fi
          # Attempt to extract "1.2.3" from "v1.2.3" to maintain artifact name backwards compat.
          # Otherwise, degrade to using full tag.
          export VERSION="$(echo "$TAG" | sed 's_^v\([0-9]\+\.[0-9]\+\.[0-9]\+\)$_\1_')"
          export ZSTD_VERSION="zstd-$VERSION"

          # archive
          git archive $TAG \
              --prefix $ZSTD_VERSION/ \
              --format tar \
              -o $ZSTD_VERSION.tar

          # Do the rest of the work in a sub-dir so we can glob everything we want to publish.
          mkdir artifacts/
          mv $ZSTD_VERSION.tar artifacts/
          cd artifacts/

          # compress
          zstd -k -19 $ZSTD_VERSION.tar
          gzip -k  -9 $ZSTD_VERSION.tar

          # we only publish the compressed tarballs
          rm $ZSTD_VERSION.tar

          # hash
          sha256sum $ZSTD_VERSION.tar.zst > $ZSTD_VERSION.tar.zst.sha256
          sha256sum $ZSTD_VERSION.tar.gz  > $ZSTD_VERSION.tar.gz.sha256

          # sign
          if [ -n "$RELEASE_SIGNING_KEY" ]; then
            export GPG_BATCH_OPTS="--batch --no-use-agent --pinentry-mode loopback --no-tty --yes"
            echo "$RELEASE_SIGNING_KEY" | gpg $GPG_BATCH_OPTS --import
            gpg $GPG_BATCH_OPTS --armor --sign --sign-with signing@zstd.net --detach-sig --passphrase "$RELEASE_SIGNING_KEY_PASSPHRASE" --output $ZSTD_VERSION.tar.zst.sig $ZSTD_VERSION.tar.zst
            gpg $GPG_BATCH_OPTS --armor --sign --sign-with signing@zstd.net --detach-sig --passphrase "$RELEASE_SIGNING_KEY_PASSPHRASE" --output $ZSTD_VERSION.tar.gz.sig  $ZSTD_VERSION.tar.gz
          fi

      - name: Publish
        uses: skx/github-action-publish-binaries@release-2.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          args: artifacts/*


  windows-artifacts:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # tag=v3
    - uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        install: make zlib git
        update: true
    # Based on https://ariya.io/2020/07/on-github-actions-with-msys2
    - name: install mingw gcc
      run: pacman --noconfirm -S gcc
    - name: win64 artifact generation with mingw gcc
      run: >-
        SET COMPILER=gcc &&
        SET "PATH=%PATH_MINGW64%;%PATH_ORIGINAL%" &&
        make -v &&
        sh -c "%COMPILER% -v" &&
        ECHO Building zlib to static link &&
        SET "CC=%COMPILER%" &&
        sh -c "cd .. && git clone --depth 1 --branch v1.2.11 https://github.com/madler/zlib" &&
        sh -c "cd ../zlib && make -f win32/Makefile.gcc libz.a"
        ECHO Building zstd &&
        SET "CPPFLAGS=-I../../zlib" &&
        SET "LDFLAGS=../../zlib/libz.a" &&
        sh -c "%SCRIPT%" &&
        ECHO Creating artifacts &&
        ECHO %cd% &&
        lib\dll\example\build_package.bat &&
        make -C programs DEBUGFLAGS= clean zstd &&
        cd programs\ && 7z a -tzip -mx9 zstd-win-binary-%PLATFORM%.zip zstd.exe &&
        appveyor PushArtifact zstd-win-binary-%PLATFORM%.zip &&
        cp zstd.exe ..\bin\zstd.exe &&
        git clone --depth 1 --branch release https://github.com/facebook/zstd &&
        cd zstd &&
        git archive --format=tar release -o zstd-src.tar &&
        ..\zstd -19 zstd-src.tar &&
        appveyor PushArtifact zstd-src.tar.zst &&
        certUtil -hashfile zstd-src.tar.zst SHA256 > zstd-src.tar.zst.sha256.sig &&
        appveyor PushArtifact zstd-src.tar.zst.sha256.sig &&
        cd ..\..\bin\ &&
        7z a -tzip -mx9 zstd-win-release-%PLATFORM%.zip * &&
        appveyor PushArtifact zstd-win-release-%PLATFORM%.zip
